var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  default: () => src_default,
  globalVariablesKey: () => globalVariablesKey
});

// node_modules/tsup/assets/cjs_shims.js
var importMetaUrlShim = typeof document === "undefined" ? new (require("url")).URL("file:" + __filename).href : document.currentScript && document.currentScript.src || new URL("main.js", document.baseURI).href;

// src/index.ts
var path2 = __toModule(require("path"));
var import_nunjucks = __toModule(require("nunjucks"));

// src/defaults.ts
var path = __toModule(require("path"));
var defaultConfigureOptions = {
  noCache: true
};
var defaultPluginOptions = {
  templatesDir: path.resolve(process.cwd(), "src", "html"),
  nunjucksConfigure: defaultConfigureOptions
};

// src/index.ts
var globalVariablesKey = "*";
var src_default = (options = {}) => {
  const env = options.nunjucksEnvironment instanceof import_nunjucks.Environment ? options.nunjucksEnvironment : createNunjucksEnvironment(options.nunjucksEnvironment || {});
  return {
    name: "nunjucks",
    enforce: "pre",
    handleHotUpdate,
    transformIndexHtml: {
      enforce: "pre",
      transform: handleTransformHtml
    }
  };
  function createNunjucksEnvironment({ extensions, filters }) {
    options = __spreadValues(__spreadValues({}, defaultPluginOptions), options);
    const env2 = import_nunjucks.default.configure(__spreadValues(__spreadValues({}, defaultConfigureOptions), options.nunjucksConfigure || {}));
    Object.keys(extensions || {}).forEach((name) => env2.addExtension(name, extensions[name]));
    Object.keys(filters || {}).forEach((name) => {
      const filter = filters[name];
      typeof filter === "object" && filter.hasOwnProperty("filter") ? env2.addFilter(name, filter.filter, filter.async) : env2.addFilter(name, filter);
    });
    return env2;
  }
  function handleTransformHtml(html, context) {
    var _a, _b;
    const key = path2.basename(context.path);
    const globalVariables = ((_a = options.variables) == null ? void 0 : _a[globalVariablesKey]) || {};
    const templateVariables = ((_b = options.variables) == null ? void 0 : _b[key]) || {};
    return new Promise((resolve3, reject) => {
      env.renderString(html, __spreadValues(__spreadValues({}, globalVariables), templateVariables), function(err, res) {
        if (err) {
          reject(err);
        } else {
          resolve3(res);
        }
      });
    });
  }
  function handleHotUpdate(context) {
    const filename = path2.resolve(context.file);
    if (!filename.startsWith(options.templatesDir))
      return;
    console.info(`Template file ${path2.basename(filename)} has been changed. Sending full-reload.`);
    context.server.ws.send({ type: "full-reload" });
    return [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  globalVariablesKey
});
