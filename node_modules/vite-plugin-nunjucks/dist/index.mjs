var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/index.ts
import {
  basename,
  resolve as resolve2
} from "path";
import nunjucks, { Environment } from "nunjucks";

// src/defaults.ts
import {
  resolve
} from "path";
var defaultConfigureOptions = {
  noCache: true
};
var defaultPluginOptions = {
  templatesDir: resolve(process.cwd(), "src", "html"),
  nunjucksConfigure: defaultConfigureOptions
};

// src/index.ts
var globalVariablesKey = "*";
var src_default = (options = {}) => {
  const env = options.nunjucksEnvironment instanceof Environment ? options.nunjucksEnvironment : createNunjucksEnvironment(options.nunjucksEnvironment || {});
  return {
    name: "nunjucks",
    enforce: "pre",
    handleHotUpdate,
    transformIndexHtml: {
      enforce: "pre",
      transform: handleTransformHtml
    }
  };
  function createNunjucksEnvironment({ extensions, filters }) {
    options = __spreadValues(__spreadValues({}, defaultPluginOptions), options);
    const env2 = nunjucks.configure(__spreadValues(__spreadValues({}, defaultConfigureOptions), options.nunjucksConfigure || {}));
    Object.keys(extensions || {}).forEach((name) => env2.addExtension(name, extensions[name]));
    Object.keys(filters || {}).forEach((name) => {
      const filter = filters[name];
      typeof filter === "object" && filter.hasOwnProperty("filter") ? env2.addFilter(name, filter.filter, filter.async) : env2.addFilter(name, filter);
    });
    return env2;
  }
  function handleTransformHtml(html, context) {
    var _a, _b;
    const key = basename(context.path);
    const globalVariables = ((_a = options.variables) == null ? void 0 : _a[globalVariablesKey]) || {};
    const templateVariables = ((_b = options.variables) == null ? void 0 : _b[key]) || {};
    return new Promise((resolve3, reject) => {
      env.renderString(html, __spreadValues(__spreadValues({}, globalVariables), templateVariables), function(err, res) {
        if (err) {
          reject(err);
        } else {
          resolve3(res);
        }
      });
    });
  }
  function handleHotUpdate(context) {
    const filename = resolve2(context.file);
    if (!filename.startsWith(options.templatesDir))
      return;
    console.info(`Template file ${basename(filename)} has been changed. Sending full-reload.`);
    context.server.ws.send({ type: "full-reload" });
    return [];
  }
};
export {
  src_default as default,
  globalVariablesKey
};
